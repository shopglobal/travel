# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TrainScheduleSearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'origin_station_id': 'str',
        'date': 'date',
        'services': 'list[RailService]'
    }

    attribute_map = {
        'origin_station_id': 'origin_station_id',
        'date': 'date',
        'services': 'services'
    }

    def __init__(self, origin_station_id=None, date=None, services=None):
        """
        TrainScheduleSearchResult - a model defined in Swagger
        """

        self._origin_station_id = None
        self._date = None
        self._services = None

        self.origin_station_id = origin_station_id
        self.date = date
        self.services = services

    @property
    def origin_station_id(self):
        """
        Gets the origin_station_id of this TrainScheduleSearchResult.
        Station ID of the origin station for this search.

        :return: The origin_station_id of this TrainScheduleSearchResult.
        :rtype: str
        """
        return self._origin_station_id

    @origin_station_id.setter
    def origin_station_id(self, origin_station_id):
        """
        Sets the origin_station_id of this TrainScheduleSearchResult.
        Station ID of the origin station for this search.

        :param origin_station_id: The origin_station_id of this TrainScheduleSearchResult.
        :type: str
        """
        if origin_station_id is None:
            raise ValueError("Invalid value for `origin_station_id`, must not be `None`")

        self._origin_station_id = origin_station_id

    @property
    def date(self):
        """
        Gets the date of this TrainScheduleSearchResult.
        The search date provided in the input.

        :return: The date of this TrainScheduleSearchResult.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this TrainScheduleSearchResult.
        The search date provided in the input.

        :param date: The date of this TrainScheduleSearchResult.
        :type: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def services(self):
        """
        Gets the services of this TrainScheduleSearchResult.
        Array to describe service to the destinations.

        :return: The services of this TrainScheduleSearchResult.
        :rtype: list[RailService]
        """
        return self._services

    @services.setter
    def services(self, services):
        """
        Sets the services of this TrainScheduleSearchResult.
        Array to describe service to the destinations.

        :param services: The services of this TrainScheduleSearchResult.
        :type: list[RailService]
        """
        if services is None:
            raise ValueError("Invalid value for `services`, must not be `None`")

        self._services = services

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TrainScheduleSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
