# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PointOfInterestResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'title': 'str',
        'main_image': 'str',
        'location': 'Geolocation',
        'grades': 'PointOfInterestResultGrades',
        'categories': 'list[str]',
        'details': 'PointOfInterestDetails',
        'contextual_images': 'list[ImageSize]',
        'geoname_id': 'int',
        'walk_time': 'float'
    }

    attribute_map = {
        'title': 'title',
        'main_image': 'main_image',
        'location': 'location',
        'grades': 'grades',
        'categories': 'categories',
        'details': 'details',
        'contextual_images': 'contextual_images',
        'geoname_id': 'geoname_id',
        'walk_time': 'walk_time'
    }

    def __init__(self, title=None, main_image=None, location=None, grades=None, categories=None, details=None, contextual_images=None, geoname_id=None, walk_time=None):
        """
        PointOfInterestResult - a model defined in Swagger
        """

        self._title = None
        self._main_image = None
        self._location = None
        self._grades = None
        self._categories = None
        self._details = None
        self._contextual_images = None
        self._geoname_id = None
        self._walk_time = None

        self.title = title
        self.main_image = main_image
        self.location = location
        if grades is not None:
          self.grades = grades
        self.categories = categories
        if details is not None:
          self.details = details
        if contextual_images is not None:
          self.contextual_images = contextual_images
        if geoname_id is not None:
          self.geoname_id = geoname_id
        if walk_time is not None:
          self.walk_time = walk_time

    @property
    def title(self):
        """
        Gets the title of this PointOfInterestResult.
        Display name of a given point of interest

        :return: The title of this PointOfInterestResult.
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """
        Sets the title of this PointOfInterestResult.
        Display name of a given point of interest

        :param title: The title of this PointOfInterestResult.
        :type: str
        """
        if title is None:
            raise ValueError("Invalid value for `title`, must not be `None`")

        self._title = title

    @property
    def main_image(self):
        """
        Gets the main_image of this PointOfInterestResult.
        A link to an image of the given location

        :return: The main_image of this PointOfInterestResult.
        :rtype: str
        """
        return self._main_image

    @main_image.setter
    def main_image(self, main_image):
        """
        Sets the main_image of this PointOfInterestResult.
        A link to an image of the given location

        :param main_image: The main_image of this PointOfInterestResult.
        :type: str
        """
        if main_image is None:
            raise ValueError("Invalid value for `main_image`, must not be `None`")

        self._main_image = main_image

    @property
    def location(self):
        """
        Gets the location of this PointOfInterestResult.

        :return: The location of this PointOfInterestResult.
        :rtype: Geolocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this PointOfInterestResult.

        :param location: The location of this PointOfInterestResult.
        :type: Geolocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def grades(self):
        """
        Gets the grades of this PointOfInterestResult.

        :return: The grades of this PointOfInterestResult.
        :rtype: PointOfInterestResultGrades
        """
        return self._grades

    @grades.setter
    def grades(self, grades):
        """
        Sets the grades of this PointOfInterestResult.

        :param grades: The grades of this PointOfInterestResult.
        :type: PointOfInterestResultGrades
        """

        self._grades = grades

    @property
    def categories(self):
        """
        Gets the categories of this PointOfInterestResult.
        Array of descriptions indicating what type of point of interest this is. You can filter the results to include only certain categories of point of interest using the category input parameter.

        :return: The categories of this PointOfInterestResult.
        :rtype: list[str]
        """
        return self._categories

    @categories.setter
    def categories(self, categories):
        """
        Sets the categories of this PointOfInterestResult.
        Array of descriptions indicating what type of point of interest this is. You can filter the results to include only certain categories of point of interest using the category input parameter.

        :param categories: The categories of this PointOfInterestResult.
        :type: list[str]
        """
        if categories is None:
            raise ValueError("Invalid value for `categories`, must not be `None`")

        self._categories = categories

    @property
    def details(self):
        """
        Gets the details of this PointOfInterestResult.

        :return: The details of this PointOfInterestResult.
        :rtype: PointOfInterestDetails
        """
        return self._details

    @details.setter
    def details(self, details):
        """
        Sets the details of this PointOfInterestResult.

        :param details: The details of this PointOfInterestResult.
        :type: PointOfInterestDetails
        """

        self._details = details

    @property
    def contextual_images(self):
        """
        Gets the contextual_images of this PointOfInterestResult.
        Images taken at this point of interest. Note that these images might have nothing to do with the point itself, particularly if you have enabled the social_media parameter

        :return: The contextual_images of this PointOfInterestResult.
        :rtype: list[ImageSize]
        """
        return self._contextual_images

    @contextual_images.setter
    def contextual_images(self, contextual_images):
        """
        Sets the contextual_images of this PointOfInterestResult.
        Images taken at this point of interest. Note that these images might have nothing to do with the point itself, particularly if you have enabled the social_media parameter

        :param contextual_images: The contextual_images of this PointOfInterestResult.
        :type: list[ImageSize]
        """

        self._contextual_images = contextual_images

    @property
    def geoname_id(self):
        """
        Gets the geoname_id of this PointOfInterestResult.
        The GeonamesID of this point of interest, if available

        :return: The geoname_id of this PointOfInterestResult.
        :rtype: int
        """
        return self._geoname_id

    @geoname_id.setter
    def geoname_id(self, geoname_id):
        """
        Sets the geoname_id of this PointOfInterestResult.
        The GeonamesID of this point of interest, if available

        :param geoname_id: The geoname_id of this PointOfInterestResult.
        :type: int
        """

        self._geoname_id = geoname_id

    @property
    def walk_time(self):
        """
        Gets the walk_time of this PointOfInterestResult.
        Time in minutes that it takes to walk from the searched coordinates to this Point of Interest

        :return: The walk_time of this PointOfInterestResult.
        :rtype: float
        """
        return self._walk_time

    @walk_time.setter
    def walk_time(self, walk_time):
        """
        Sets the walk_time of this PointOfInterestResult.
        Time in minutes that it takes to walk from the searched coordinates to this Point of Interest

        :param walk_time: The walk_time of this PointOfInterestResult.
        :type: float
        """

        self._walk_time = walk_time

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PointOfInterestResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
