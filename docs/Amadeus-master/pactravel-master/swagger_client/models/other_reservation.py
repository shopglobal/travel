# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class OtherReservation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'date': 'date',
        'location': 'str',
        'description': 'str',
        'traveler_ids': 'list[str]',
        'booking_info': 'OtherReservationBookingInfo'
    }

    attribute_map = {
        'id': 'id',
        'date': 'date',
        'location': 'location',
        'description': 'description',
        'traveler_ids': 'traveler_ids',
        'booking_info': 'booking_info'
    }

    def __init__(self, id=None, date=None, location=None, description=None, traveler_ids=None, booking_info=None):
        """
        OtherReservation - a model defined in Swagger
        """

        self._id = None
        self._date = None
        self._location = None
        self._description = None
        self._traveler_ids = None
        self._booking_info = None

        self.id = id
        self.date = date
        self.location = location
        if description is not None:
          self.description = description
        self.traveler_ids = traveler_ids
        self.booking_info = booking_info

    @property
    def id(self):
        """
        Gets the id of this OtherReservation.
        Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :return: The id of this OtherReservation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this OtherReservation.
        Uniquely identifies this other reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :param id: The id of this OtherReservation.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def date(self):
        """
        Gets the date of this OtherReservation.
        Date on which this other reservation will begin, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.

        :return: The date of this OtherReservation.
        :rtype: date
        """
        return self._date

    @date.setter
    def date(self, date):
        """
        Sets the date of this OtherReservation.
        Date on which this other reservation will begin, in the <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd.

        :param date: The date of this OtherReservation.
        :type: date
        """
        if date is None:
            raise ValueError("Invalid value for `date`, must not be `None`")

        self._date = date

    @property
    def location(self):
        """
        Gets the location of this OtherReservation.
        A 3 letter <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> that identifies where this other reservation will occur.

        :return: The location of this OtherReservation.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this OtherReservation.
        A 3 letter <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> that identifies where this other reservation will occur.

        :param location: The location of this OtherReservation.
        :type: str
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def description(self):
        """
        Gets the description of this OtherReservation.
        A free-text description of this reservation, that will inform you of its functional meaning.

        :return: The description of this OtherReservation.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this OtherReservation.
        A free-text description of this reservation, that will inform you of its functional meaning.

        :param description: The description of this OtherReservation.
        :type: str
        """

        self._description = description

    @property
    def traveler_ids(self):
        """
        Gets the traveler_ids of this OtherReservation.
        Traveler identifiers to indicate the travelers to whom this reservation applies.

        :return: The traveler_ids of this OtherReservation.
        :rtype: list[str]
        """
        return self._traveler_ids

    @traveler_ids.setter
    def traveler_ids(self, traveler_ids):
        """
        Sets the traveler_ids of this OtherReservation.
        Traveler identifiers to indicate the travelers to whom this reservation applies.

        :param traveler_ids: The traveler_ids of this OtherReservation.
        :type: list[str]
        """
        if traveler_ids is None:
            raise ValueError("Invalid value for `traveler_ids`, must not be `None`")

        self._traveler_ids = traveler_ids

    @property
    def booking_info(self):
        """
        Gets the booking_info of this OtherReservation.
        The status of this reservation.

        :return: The booking_info of this OtherReservation.
        :rtype: OtherReservationBookingInfo
        """
        return self._booking_info

    @booking_info.setter
    def booking_info(self, booking_info):
        """
        Sets the booking_info of this OtherReservation.
        The status of this reservation.

        :param booking_info: The booking_info of this OtherReservation.
        :type: OtherReservationBookingInfo
        """
        if booking_info is None:
            raise ValueError("Invalid value for `booking_info`, must not be `None`")

        self._booking_info = booking_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, OtherReservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
