# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Infant(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_name': 'str',
        'first_name': 'str',
        'date_of_birth': 'date'
    }

    attribute_map = {
        'last_name': 'last_name',
        'first_name': 'first_name',
        'date_of_birth': 'date_of_birth'
    }

    def __init__(self, last_name=None, first_name=None, date_of_birth=None):
        """
        Infant - a model defined in Swagger
        """

        self._last_name = None
        self._first_name = None
        self._date_of_birth = None

        if last_name is not None:
          self.last_name = last_name
        if first_name is not None:
          self.first_name = first_name
        if date_of_birth is not None:
          self.date_of_birth = date_of_birth

    @property
    def last_name(self):
        """
        Gets the last_name of this Infant.
        The last name of the infant, as entered by the agent, in upper-case. If no value is provided, the last name of the infant can generally be assumed to be the same as that of the traveler which whom they are associated.

        :return: The last_name of this Infant.
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """
        Sets the last_name of this Infant.
        The last name of the infant, as entered by the agent, in upper-case. If no value is provided, the last name of the infant can generally be assumed to be the same as that of the traveler which whom they are associated.

        :param last_name: The last_name of this Infant.
        :type: str
        """

        self._last_name = last_name

    @property
    def first_name(self):
        """
        Gets the first_name of this Infant.
        The first name of the infant, as entered by the agent, in upper-case. May include middle names, initials or prefixes.

        :return: The first_name of this Infant.
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """
        Sets the first_name of this Infant.
        The first name of the infant, as entered by the agent, in upper-case. May include middle names, initials or prefixes.

        :param first_name: The first_name of this Infant.
        :type: str
        """

        self._first_name = first_name

    @property
    def date_of_birth(self):
        """
        Gets the date_of_birth of this Infant.
        An optional <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date indicating the birth date of the infant, as provided by the agent. For example&colon; 1972-02-19.

        :return: The date_of_birth of this Infant.
        :rtype: date
        """
        return self._date_of_birth

    @date_of_birth.setter
    def date_of_birth(self, date_of_birth):
        """
        Sets the date_of_birth of this Infant.
        An optional <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date indicating the birth date of the infant, as provided by the agent. For example&colon; 1972-02-19.

        :param date_of_birth: The date_of_birth of this Infant.
        :type: date
        """

        self._date_of_birth = date_of_birth

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Infant):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
