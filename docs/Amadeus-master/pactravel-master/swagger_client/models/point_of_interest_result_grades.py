# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PointOfInterestResultGrades(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'yapq_grade': 'int',
        'city_grade': 'int'
    }

    attribute_map = {
        'yapq_grade': 'yapq_grade',
        'city_grade': 'city_grade'
    }

    def __init__(self, yapq_grade=None, city_grade=None):
        """
        PointOfInterestResultGrades - a model defined in Swagger
        """

        self._yapq_grade = None
        self._city_grade = None

        if yapq_grade is not None:
          self.yapq_grade = yapq_grade
        if city_grade is not None:
          self.city_grade = city_grade

    @property
    def yapq_grade(self):
        """
        Gets the yapq_grade of this PointOfInterestResultGrades.
        Main YAPQ grade. A grade out of 5 for this point, rated against all points in the world and normalized among selected group of points. 5 is best, 0 is worst.

        :return: The yapq_grade of this PointOfInterestResultGrades.
        :rtype: int
        """
        return self._yapq_grade

    @yapq_grade.setter
    def yapq_grade(self, yapq_grade):
        """
        Sets the yapq_grade of this PointOfInterestResultGrades.
        Main YAPQ grade. A grade out of 5 for this point, rated against all points in the world and normalized among selected group of points. 5 is best, 0 is worst.

        :param yapq_grade: The yapq_grade of this PointOfInterestResultGrades.
        :type: int
        """

        self._yapq_grade = yapq_grade

    @property
    def city_grade(self):
        """
        Gets the city_grade of this PointOfInterestResultGrades.
        The ranking of this point of interest compared to other points in this city. 1 is the highest rated.

        :return: The city_grade of this PointOfInterestResultGrades.
        :rtype: int
        """
        return self._city_grade

    @city_grade.setter
    def city_grade(self, city_grade):
        """
        Sets the city_grade of this PointOfInterestResultGrades.
        The ranking of this point of interest compared to other points in this city. 1 is the highest rated.

        :param city_grade: The city_grade of this PointOfInterestResultGrades.
        :type: int
        """

        self._city_grade = city_grade

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PointOfInterestResultGrades):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
