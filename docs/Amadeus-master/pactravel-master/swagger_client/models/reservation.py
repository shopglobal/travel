# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Reservation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'flight_tickets': 'FlightTicket',
        'unticketed_flights': 'list[FlightReservationBound]',
        'cars': 'list[CarReservation]',
        'hotels': 'list[HotelReservation]',
        'others': 'list[OtherReservation]'
    }

    attribute_map = {
        'flight_tickets': 'flight_tickets',
        'unticketed_flights': 'unticketed_flights',
        'cars': 'cars',
        'hotels': 'hotels',
        'others': 'others'
    }

    def __init__(self, flight_tickets=None, unticketed_flights=None, cars=None, hotels=None, others=None):
        """
        Reservation - a model defined in Swagger
        """

        self._flight_tickets = None
        self._unticketed_flights = None
        self._cars = None
        self._hotels = None
        self._others = None

        if flight_tickets is not None:
          self.flight_tickets = flight_tickets
        if unticketed_flights is not None:
          self.unticketed_flights = unticketed_flights
        if cars is not None:
          self.cars = cars
        if hotels is not None:
          self.hotels = hotels
        if others is not None:
          self.others = others

    @property
    def flight_tickets(self):
        """
        Gets the flight_tickets of this Reservation.

        :return: The flight_tickets of this Reservation.
        :rtype: FlightTicket
        """
        return self._flight_tickets

    @flight_tickets.setter
    def flight_tickets(self, flight_tickets):
        """
        Sets the flight_tickets of this Reservation.

        :param flight_tickets: The flight_tickets of this Reservation.
        :type: FlightTicket
        """

        self._flight_tickets = flight_tickets

    @property
    def unticketed_flights(self):
        """
        Gets the unticketed_flights of this Reservation.
        The flight itineraries in this reservation that have not yet been ticketed or priced.

        :return: The unticketed_flights of this Reservation.
        :rtype: list[FlightReservationBound]
        """
        return self._unticketed_flights

    @unticketed_flights.setter
    def unticketed_flights(self, unticketed_flights):
        """
        Sets the unticketed_flights of this Reservation.
        The flight itineraries in this reservation that have not yet been ticketed or priced.

        :param unticketed_flights: The unticketed_flights of this Reservation.
        :type: list[FlightReservationBound]
        """

        self._unticketed_flights = unticketed_flights

    @property
    def cars(self):
        """
        Gets the cars of this Reservation.
        The rental cars reserved.

        :return: The cars of this Reservation.
        :rtype: list[CarReservation]
        """
        return self._cars

    @cars.setter
    def cars(self, cars):
        """
        Sets the cars of this Reservation.
        The rental cars reserved.

        :param cars: The cars of this Reservation.
        :type: list[CarReservation]
        """

        self._cars = cars

    @property
    def hotels(self):
        """
        Gets the hotels of this Reservation.
        The hotel room bookings in this reservation.

        :return: The hotels of this Reservation.
        :rtype: list[HotelReservation]
        """
        return self._hotels

    @hotels.setter
    def hotels(self, hotels):
        """
        Sets the hotels of this Reservation.
        The hotel room bookings in this reservation.

        :param hotels: The hotels of this Reservation.
        :type: list[HotelReservation]
        """

        self._hotels = hotels

    @property
    def others(self):
        """
        Gets the others of this Reservation.
        Free text information to represent other travel items that may be considered part of the travel itinerary in this reservation.

        :return: The others of this Reservation.
        :rtype: list[OtherReservation]
        """
        return self._others

    @others.setter
    def others(self, others):
        """
        Sets the others of this Reservation.
        Free text information to represent other travel items that may be considered part of the travel itinerary in this reservation.

        :param others: The others of this Reservation.
        :type: list[OtherReservation]
        """

        self._others = others

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Reservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
