# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LowFareSearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'itineraries': 'list[FlightSearchItinerary]',
        'fare': 'FlightSearchPrice'
    }

    attribute_map = {
        'itineraries': 'itineraries',
        'fare': 'fare'
    }

    def __init__(self, itineraries=None, fare=None):
        """
        LowFareSearchResult - a model defined in Swagger
        """

        self._itineraries = None
        self._fare = None

        if itineraries is not None:
          self.itineraries = itineraries
        self.fare = fare

    @property
    def itineraries(self):
        """
        Gets the itineraries of this LowFareSearchResult.

        :return: The itineraries of this LowFareSearchResult.
        :rtype: list[FlightSearchItinerary]
        """
        return self._itineraries

    @itineraries.setter
    def itineraries(self, itineraries):
        """
        Sets the itineraries of this LowFareSearchResult.

        :param itineraries: The itineraries of this LowFareSearchResult.
        :type: list[FlightSearchItinerary]
        """

        self._itineraries = itineraries

    @property
    def fare(self):
        """
        Gets the fare of this LowFareSearchResult.
        The price and fare information which applies to all itineraries in this response

        :return: The fare of this LowFareSearchResult.
        :rtype: FlightSearchPrice
        """
        return self._fare

    @fare.setter
    def fare(self, fare):
        """
        Sets the fare of this LowFareSearchResult.
        The price and fare information which applies to all itineraries in this response

        :param fare: The fare of this LowFareSearchResult.
        :type: FlightSearchPrice
        """
        if fare is None:
            raise ValueError("Invalid value for `fare`, must not be `None`")

        self._fare = fare

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LowFareSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
