# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlightReservationSegment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'departs_at': 'str',
        'arrives_at': 'str',
        'origin': 'Airport',
        'destination': 'Airport',
        'marketing_airline': 'str',
        'operating_airline': 'str',
        'flight_number': 'str',
        'traveler_ids': 'list[str]',
        'booking_info': 'FlightReservationBookingInfo'
    }

    attribute_map = {
        'id': 'id',
        'departs_at': 'departs_at',
        'arrives_at': 'arrives_at',
        'origin': 'origin',
        'destination': 'destination',
        'marketing_airline': 'marketing_airline',
        'operating_airline': 'operating_airline',
        'flight_number': 'flight_number',
        'traveler_ids': 'traveler_ids',
        'booking_info': 'booking_info'
    }

    def __init__(self, id=None, departs_at=None, arrives_at=None, origin=None, destination=None, marketing_airline=None, operating_airline=None, flight_number=None, traveler_ids=None, booking_info=None):
        """
        FlightReservationSegment - a model defined in Swagger
        """

        self._id = None
        self._departs_at = None
        self._arrives_at = None
        self._origin = None
        self._destination = None
        self._marketing_airline = None
        self._operating_airline = None
        self._flight_number = None
        self._traveler_ids = None
        self._booking_info = None

        self.id = id
        self.departs_at = departs_at
        self.arrives_at = arrives_at
        self.origin = origin
        self.destination = destination
        self.marketing_airline = marketing_airline
        self.operating_airline = operating_airline
        self.flight_number = flight_number
        self.traveler_ids = traveler_ids
        self.booking_info = booking_info

    @property
    def id(self):
        """
        Gets the id of this FlightReservationSegment.
        Uniquely identifies this flight in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :return: The id of this FlightReservationSegment.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FlightReservationSegment.
        Uniquely identifies this flight in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :param id: The id of this FlightReservationSegment.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def departs_at(self):
        """
        Gets the departs_at of this FlightReservationSegment.
        Date and time of departure at the origin, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the origin airport

        :return: The departs_at of this FlightReservationSegment.
        :rtype: str
        """
        return self._departs_at

    @departs_at.setter
    def departs_at(self, departs_at):
        """
        Sets the departs_at of this FlightReservationSegment.
        Date and time of departure at the origin, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the origin airport

        :param departs_at: The departs_at of this FlightReservationSegment.
        :type: str
        """
        if departs_at is None:
            raise ValueError("Invalid value for `departs_at`, must not be `None`")

        self._departs_at = departs_at

    @property
    def arrives_at(self):
        """
        Gets the arrives_at of this FlightReservationSegment.
        Date and time of departure at the destination, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the destination airport

        :return: The arrives_at of this FlightReservationSegment.
        :rtype: str
        """
        return self._arrives_at

    @arrives_at.setter
    def arrives_at(self, arrives_at):
        """
        Sets the arrives_at of this FlightReservationSegment.
        Date and time of departure at the destination, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a>  date format yyyy-MM-ddTHH:mm in the local time at the destination airport

        :param arrives_at: The arrives_at of this FlightReservationSegment.
        :type: str
        """
        if arrives_at is None:
            raise ValueError("Invalid value for `arrives_at`, must not be `None`")

        self._arrives_at = arrives_at

    @property
    def origin(self):
        """
        Gets the origin of this FlightReservationSegment.
        Information on the origin airport, from which this flight departs

        :return: The origin of this FlightReservationSegment.
        :rtype: Airport
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this FlightReservationSegment.
        Information on the origin airport, from which this flight departs

        :param origin: The origin of this FlightReservationSegment.
        :type: Airport
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def destination(self):
        """
        Gets the destination of this FlightReservationSegment.
        Information on the destination airport, at which this flight arrives

        :return: The destination of this FlightReservationSegment.
        :rtype: Airport
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this FlightReservationSegment.
        Information on the destination airport, at which this flight arrives

        :param destination: The destination of this FlightReservationSegment.
        :type: Airport
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def marketing_airline(self):
        """
        Gets the marketing_airline of this FlightReservationSegment.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is responsible for the traveller this flight

        :return: The marketing_airline of this FlightReservationSegment.
        :rtype: str
        """
        return self._marketing_airline

    @marketing_airline.setter
    def marketing_airline(self, marketing_airline):
        """
        Sets the marketing_airline of this FlightReservationSegment.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is responsible for the traveller this flight

        :param marketing_airline: The marketing_airline of this FlightReservationSegment.
        :type: str
        """
        if marketing_airline is None:
            raise ValueError("Invalid value for `marketing_airline`, must not be `None`")

        self._marketing_airline = marketing_airline

    @property
    def operating_airline(self):
        """
        Gets the operating_airline of this FlightReservationSegment.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application.

        :return: The operating_airline of this FlightReservationSegment.
        :rtype: str
        """
        return self._operating_airline

    @operating_airline.setter
    def operating_airline(self, operating_airline):
        """
        Sets the operating_airline of this FlightReservationSegment.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is providing the aircraft for this flight. Note that in the USA, if the marketing and operating carrier are different, you are legally required to display this in your application.

        :param operating_airline: The operating_airline of this FlightReservationSegment.
        :type: str
        """
        if operating_airline is None:
            raise ValueError("Invalid value for `operating_airline`, must not be `None`")

        self._operating_airline = operating_airline

    @property
    def flight_number(self):
        """
        Gets the flight_number of this FlightReservationSegment.
        The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft's flight

        :return: The flight_number of this FlightReservationSegment.
        :rtype: str
        """
        return self._flight_number

    @flight_number.setter
    def flight_number(self, flight_number):
        """
        Sets the flight_number of this FlightReservationSegment.
        The identifier that the airline uses for this flight route. This is most commonly - but not always - a number. When combined with the airline and date, it identifies an individual aircraft's flight

        :param flight_number: The flight_number of this FlightReservationSegment.
        :type: str
        """
        if flight_number is None:
            raise ValueError("Invalid value for `flight_number`, must not be `None`")

        self._flight_number = flight_number

    @property
    def traveler_ids(self):
        """
        Gets the traveler_ids of this FlightReservationSegment.
        Traveler identifiers to indicate the travelers to whom this ticket applies.

        :return: The traveler_ids of this FlightReservationSegment.
        :rtype: list[str]
        """
        return self._traveler_ids

    @traveler_ids.setter
    def traveler_ids(self, traveler_ids):
        """
        Sets the traveler_ids of this FlightReservationSegment.
        Traveler identifiers to indicate the travelers to whom this ticket applies.

        :param traveler_ids: The traveler_ids of this FlightReservationSegment.
        :type: list[str]
        """
        if traveler_ids is None:
            raise ValueError("Invalid value for `traveler_ids`, must not be `None`")

        self._traveler_ids = traveler_ids

    @property
    def booking_info(self):
        """
        Gets the booking_info of this FlightReservationSegment.
        A booking information object with additional details about how the quality of this flight at the given price.

        :return: The booking_info of this FlightReservationSegment.
        :rtype: FlightReservationBookingInfo
        """
        return self._booking_info

    @booking_info.setter
    def booking_info(self, booking_info):
        """
        Sets the booking_info of this FlightReservationSegment.
        A booking information object with additional details about how the quality of this flight at the given price.

        :param booking_info: The booking_info of this FlightReservationSegment.
        :type: FlightReservationBookingInfo
        """
        if booking_info is None:
            raise ValueError("Invalid value for `booking_info`, must not be `None`")

        self._booking_info = booking_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlightReservationSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
