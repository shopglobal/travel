# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlightReservationBookingInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'travel_class': 'str',
        'booking_code': 'str',
        'airline_record_locator': 'str',
        'status': 'str'
    }

    attribute_map = {
        'travel_class': 'travel_class',
        'booking_code': 'booking_code',
        'airline_record_locator': 'airline_record_locator',
        'status': 'status'
    }

    def __init__(self, travel_class=None, booking_code=None, airline_record_locator=None, status=None):
        """
        FlightReservationBookingInfo - a model defined in Swagger
        """

        self._travel_class = None
        self._booking_code = None
        self._airline_record_locator = None
        self._status = None

        self.travel_class = travel_class
        self.booking_code = booking_code
        self.airline_record_locator = airline_record_locator
        self.status = status

    @property
    def travel_class(self):
        """
        Gets the travel_class of this FlightReservationBookingInfo.
        The cabin class offered on this flight. An enumeration that will read either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST

        :return: The travel_class of this FlightReservationBookingInfo.
        :rtype: str
        """
        return self._travel_class

    @travel_class.setter
    def travel_class(self, travel_class):
        """
        Sets the travel_class of this FlightReservationBookingInfo.
        The cabin class offered on this flight. An enumeration that will read either ECONOMY, PREMIUM_ECONOMY, BUSINESS or FIRST

        :param travel_class: The travel_class of this FlightReservationBookingInfo.
        :type: str
        """
        if travel_class is None:
            raise ValueError("Invalid value for `travel_class`, must not be `None`")

        self._travel_class = travel_class

    @property
    def booking_code(self):
        """
        Gets the booking_code of this FlightReservationBookingInfo.
        The Reservation Booking Designator code that determines the quality and terms of the flight offered for the given price. A single letter from A..Z

        :return: The booking_code of this FlightReservationBookingInfo.
        :rtype: str
        """
        return self._booking_code

    @booking_code.setter
    def booking_code(self, booking_code):
        """
        Sets the booking_code of this FlightReservationBookingInfo.
        The Reservation Booking Designator code that determines the quality and terms of the flight offered for the given price. A single letter from A..Z

        :param booking_code: The booking_code of this FlightReservationBookingInfo.
        :type: str
        """
        if booking_code is None:
            raise ValueError("Invalid value for `booking_code`, must not be `None`")

        self._booking_code = booking_code

    @property
    def airline_record_locator(self):
        """
        Gets the airline_record_locator of this FlightReservationBookingInfo.
        6 character identifier of this travel record on the airline's system. May be the same as the global record locator.

        :return: The airline_record_locator of this FlightReservationBookingInfo.
        :rtype: str
        """
        return self._airline_record_locator

    @airline_record_locator.setter
    def airline_record_locator(self, airline_record_locator):
        """
        Sets the airline_record_locator of this FlightReservationBookingInfo.
        6 character identifier of this travel record on the airline's system. May be the same as the global record locator.

        :param airline_record_locator: The airline_record_locator of this FlightReservationBookingInfo.
        :type: str
        """
        if airline_record_locator is None:
            raise ValueError("Invalid value for `airline_record_locator`, must not be `None`")

        self._airline_record_locator = airline_record_locator

    @property
    def status(self):
        """
        Gets the status of this FlightReservationBookingInfo.
        An enumeration to represent the reservation status for this seat on this flight. For example&colon; CONFIRMED, CANCELLED, RESCHEDULED, FLIGHT_CANCELLED, WAITLISTED.

        :return: The status of this FlightReservationBookingInfo.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this FlightReservationBookingInfo.
        An enumeration to represent the reservation status for this seat on this flight. For example&colon; CONFIRMED, CANCELLED, RESCHEDULED, FLIGHT_CANCELLED, WAITLISTED.

        :param status: The status of this FlightReservationBookingInfo.
        :type: str
        """
        if status is None:
            raise ValueError("Invalid value for `status`, must not be `None`")

        self._status = status

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlightReservationBookingInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
