# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Amenity(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'amenity': 'str',
        'ota_code': 'str',
        'description': 'str'
    }

    attribute_map = {
        'amenity': 'amenity',
        'ota_code': 'ota_code',
        'description': 'description'
    }

    def __init__(self, amenity=None, ota_code=None, description=None):
        """
        Amenity - a model defined in Swagger
        """

        self._amenity = None
        self._ota_code = None
        self._description = None

        if amenity is not None:
          self.amenity = amenity
        if ota_code is not None:
          self.ota_code = ota_code
        if description is not None:
          self.description = description

    @property
    def amenity(self):
        """
        Gets the amenity of this Amenity.
        <a href=\"hotels-api-supported-amenities-filter\">The amenity code</a>

        :return: The amenity of this Amenity.
        :rtype: str
        """
        return self._amenity

    @amenity.setter
    def amenity(self, amenity):
        """
        Sets the amenity of this Amenity.
        <a href=\"hotels-api-supported-amenities-filter\">The amenity code</a>

        :param amenity: The amenity of this Amenity.
        :type: str
        """

        self._amenity = amenity

    @property
    def ota_code(self):
        """
        Gets the ota_code of this Amenity.
        The <a href=\"http://www.opentravel.org/\">Open Travel Alliance</a> <a href=\"ota-hotel-amenity-code-table\">Hotel Amenities Code</a> for this amenity.

        :return: The ota_code of this Amenity.
        :rtype: str
        """
        return self._ota_code

    @ota_code.setter
    def ota_code(self, ota_code):
        """
        Sets the ota_code of this Amenity.
        The <a href=\"http://www.opentravel.org/\">Open Travel Alliance</a> <a href=\"ota-hotel-amenity-code-table\">Hotel Amenities Code</a> for this amenity.

        :param ota_code: The ota_code of this Amenity.
        :type: str
        """

        self._ota_code = ota_code

    @property
    def description(self):
        """
        Gets the description of this Amenity.
        The decoded text description for this amenity code, where available.

        :return: The description of this Amenity.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Amenity.
        The decoded text description for this amenity code, where available.

        :param description: The description of this Amenity.
        :type: str
        """

        self._description = description

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Amenity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
