# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class CarReservation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'pick_up': 'str',
        'drop_off': 'str',
        'provider': 'Company',
        'origin': 'str',
        'car': 'Vehicle',
        'traveler_ids': 'list[str]',
        'booking_info': 'CarReservationBookingInfo'
    }

    attribute_map = {
        'id': 'id',
        'pick_up': 'pick_up',
        'drop_off': 'drop_off',
        'provider': 'provider',
        'origin': 'origin',
        'car': 'car',
        'traveler_ids': 'traveler_ids',
        'booking_info': 'booking_info'
    }

    def __init__(self, id=None, pick_up=None, drop_off=None, provider=None, origin=None, car=None, traveler_ids=None, booking_info=None):
        """
        CarReservation - a model defined in Swagger
        """

        self._id = None
        self._pick_up = None
        self._drop_off = None
        self._provider = None
        self._origin = None
        self._car = None
        self._traveler_ids = None
        self._booking_info = None

        self.id = id
        self.pick_up = pick_up
        self.drop_off = drop_off
        self.provider = provider
        self.origin = origin
        self.car = car
        if traveler_ids is not None:
          self.traveler_ids = traveler_ids
        if booking_info is not None:
          self.booking_info = booking_info

    @property
    def id(self):
        """
        Gets the id of this CarReservation.
        Uniquely identifies this car rental reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :return: The id of this CarReservation.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this CarReservation.
        Uniquely identifies this car rental reservation in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :param id: The id of this CarReservation.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def pick_up(self):
        """
        Gets the pick_up of this CarReservation.
        Date on which the car rental will be collected from the car rental location. <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-ddTHH.

        :return: The pick_up of this CarReservation.
        :rtype: str
        """
        return self._pick_up

    @pick_up.setter
    def pick_up(self, pick_up):
        """
        Sets the pick_up of this CarReservation.
        Date on which the car rental will be collected from the car rental location. <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-ddTHH.

        :param pick_up: The pick_up of this CarReservation.
        :type: str
        """
        if pick_up is None:
            raise ValueError("Invalid value for `pick_up`, must not be `None`")

        self._pick_up = pick_up

    @property
    def drop_off(self):
        """
        Gets the drop_off of this CarReservation.
        Date at which the car rental will end and the car will be returned to the rental location. <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-ddTHH.

        :return: The drop_off of this CarReservation.
        :rtype: str
        """
        return self._drop_off

    @drop_off.setter
    def drop_off(self, drop_off):
        """
        Sets the drop_off of this CarReservation.
        Date at which the car rental will end and the car will be returned to the rental location. <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-ddTHH.

        :param drop_off: The drop_off of this CarReservation.
        :type: str
        """
        if drop_off is None:
            raise ValueError("Invalid value for `drop_off`, must not be `None`")

        self._drop_off = drop_off

    @property
    def provider(self):
        """
        Gets the provider of this CarReservation.
        Details of the car company offering this rental.

        :return: The provider of this CarReservation.
        :rtype: Company
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this CarReservation.
        Details of the car company offering this rental.

        :param provider: The provider of this CarReservation.
        :type: Company
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def origin(self):
        """
        Gets the origin of this CarReservation.
        This car rental company office location ID. If this is an airport location, this will be the airport's <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a>. Otherwise, this is a custom value provided by the car rental provider.

        :return: The origin of this CarReservation.
        :rtype: str
        """
        return self._origin

    @origin.setter
    def origin(self, origin):
        """
        Sets the origin of this CarReservation.
        This car rental company office location ID. If this is an airport location, this will be the airport's <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a>. Otherwise, this is a custom value provided by the car rental provider.

        :param origin: The origin of this CarReservation.
        :type: str
        """
        if origin is None:
            raise ValueError("Invalid value for `origin`, must not be `None`")

        self._origin = origin

    @property
    def car(self):
        """
        Gets the car of this CarReservation.
        A car information object giving further details about the vehicle provided for rental.

        :return: The car of this CarReservation.
        :rtype: Vehicle
        """
        return self._car

    @car.setter
    def car(self, car):
        """
        Sets the car of this CarReservation.
        A car information object giving further details about the vehicle provided for rental.

        :param car: The car of this CarReservation.
        :type: Vehicle
        """
        if car is None:
            raise ValueError("Invalid value for `car`, must not be `None`")

        self._car = car

    @property
    def traveler_ids(self):
        """
        Gets the traveler_ids of this CarReservation.
        Traveler identifiers to indicate the travelers to whom this car rental applies. Generally, only drivers of the vehicle will be marked in this array.

        :return: The traveler_ids of this CarReservation.
        :rtype: list[str]
        """
        return self._traveler_ids

    @traveler_ids.setter
    def traveler_ids(self, traveler_ids):
        """
        Sets the traveler_ids of this CarReservation.
        Traveler identifiers to indicate the travelers to whom this car rental applies. Generally, only drivers of the vehicle will be marked in this array.

        :param traveler_ids: The traveler_ids of this CarReservation.
        :type: list[str]
        """

        self._traveler_ids = traveler_ids

    @property
    def booking_info(self):
        """
        Gets the booking_info of this CarReservation.
        Additional details the status of this car rental reservation.

        :return: The booking_info of this CarReservation.
        :rtype: CarReservationBookingInfo
        """
        return self._booking_info

    @booking_info.setter
    def booking_info(self, booking_info):
        """
        Sets the booking_info of this CarReservation.
        Additional details the status of this car rental reservation.

        :param booking_info: The booking_info of this CarReservation.
        :type: CarReservationBookingInfo
        """

        self._booking_info = booking_info

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, CarReservation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
