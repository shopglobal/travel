# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExtremeSearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'departure_date': 'date',
        'return_date': 'date',
        'price': 'str',
        'airline': 'str'
    }

    attribute_map = {
        'destination': 'destination',
        'departure_date': 'departure_date',
        'return_date': 'return_date',
        'price': 'price',
        'airline': 'airline'
    }

    def __init__(self, destination=None, departure_date=None, return_date=None, price=None, airline=None):
        """
        ExtremeSearchResult - a model defined in Swagger
        """

        self._destination = None
        self._departure_date = None
        self._return_date = None
        self._price = None
        self._airline = None

        self.destination = destination
        if departure_date is not None:
          self.departure_date = departure_date
        if return_date is not None:
          self.return_date = return_date
        self.price = price
        if airline is not None:
          self.airline = airline

    @property
    def destination(self):
        """
        Gets the destination of this ExtremeSearchResult.
        The <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city or airport to which the traveler may go, from the provided origin

        :return: The destination of this ExtremeSearchResult.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this ExtremeSearchResult.
        The <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city or airport to which the traveler may go, from the provided origin

        :param destination: The destination of this ExtremeSearchResult.
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def departure_date(self):
        """
        Gets the departure_date of this ExtremeSearchResult.
        The date departure at the origin, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd, to go to the above destination

        :return: The departure_date of this ExtremeSearchResult.
        :rtype: date
        """
        return self._departure_date

    @departure_date.setter
    def departure_date(self, departure_date):
        """
        Sets the departure_date of this ExtremeSearchResult.
        The date departure at the origin, in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd, to go to the above destination

        :param departure_date: The departure_date of this ExtremeSearchResult.
        :type: date
        """

        self._departure_date = departure_date

    @property
    def return_date(self):
        """
        Gets the return_date of this ExtremeSearchResult.
        The date at which the flight from the destination to the origin will depart from the destination. The date is in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd, in the local date of the origin. This field will not be present in the response if the one-way request parameter is set to true.

        :return: The return_date of this ExtremeSearchResult.
        :rtype: date
        """
        return self._return_date

    @return_date.setter
    def return_date(self, return_date):
        """
        Sets the return_date of this ExtremeSearchResult.
        The date at which the flight from the destination to the origin will depart from the destination. The date is in <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date format yyyy-MM-dd, in the local date of the origin. This field will not be present in the response if the one-way request parameter is set to true.

        :param return_date: The return_date of this ExtremeSearchResult.
        :type: date
        """

        self._return_date = return_date

    @property
    def price(self):
        """
        Gets the price of this ExtremeSearchResult.
        The minimum total price for one adult passenger for a round trip from the origin to the destination and back. Always a string, formatted correctly for the provided currency

        :return: The price of this ExtremeSearchResult.
        :rtype: str
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this ExtremeSearchResult.
        The minimum total price for one adult passenger for a round trip from the origin to the destination and back. Always a string, formatted correctly for the provided currency

        :param price: The price of this ExtremeSearchResult.
        :type: str
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def airline(self):
        """
        Gets the airline of this ExtremeSearchResult.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is responsible for selling the traveler this flight - also known as the Validating Carrier. Airlines are specified using <a href=\"https://en.wikipedia.org/wiki/Airline_codes\"><a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a>s</a>

        :return: The airline of this ExtremeSearchResult.
        :rtype: str
        """
        return self._airline

    @airline.setter
    def airline(self, airline):
        """
        Sets the airline of this ExtremeSearchResult.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is responsible for selling the traveler this flight - also known as the Validating Carrier. Airlines are specified using <a href=\"https://en.wikipedia.org/wiki/Airline_codes\"><a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a>s</a>

        :param airline: The airline of this ExtremeSearchResult.
        :type: str
        """

        self._airline = airline

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExtremeSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
