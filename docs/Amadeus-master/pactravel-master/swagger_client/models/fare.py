# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Fare(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total_fare': 'str',
        'tax': 'str'
    }

    attribute_map = {
        'total_fare': 'total_fare',
        'tax': 'tax'
    }

    def __init__(self, total_fare=None, tax=None):
        """
        Fare - a model defined in Swagger
        """

        self._total_fare = None
        self._tax = None

        self.total_fare = total_fare
        self.tax = tax

    @property
    def total_fare(self):
        """
        Gets the total_fare of this Fare.
        The total price, including taxes per-passenger, for this passenger type, for this itinerary. Always a string, formatted correctly for the given currency

        :return: The total_fare of this Fare.
        :rtype: str
        """
        return self._total_fare

    @total_fare.setter
    def total_fare(self, total_fare):
        """
        Sets the total_fare of this Fare.
        The total price, including taxes per-passenger, for this passenger type, for this itinerary. Always a string, formatted correctly for the given currency

        :param total_fare: The total_fare of this Fare.
        :type: str
        """
        if total_fare is None:
            raise ValueError("Invalid value for `total_fare`, must not be `None`")

        self._total_fare = total_fare

    @property
    def tax(self):
        """
        Gets the tax of this Fare.
        The tax applied per-passenger, for this passenger type, for this itinerary. Some of this tax may be refundable in the event of cancellation.

        :return: The tax of this Fare.
        :rtype: str
        """
        return self._tax

    @tax.setter
    def tax(self, tax):
        """
        Sets the tax of this Fare.
        The tax applied per-passenger, for this passenger type, for this itinerary. Some of this tax may be refundable in the event of cancellation.

        :param tax: The tax of this Fare.
        :type: str
        """
        if tax is None:
            raise ValueError("Invalid value for `tax`, must not be `None`")

        self._tax = tax

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Fare):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
