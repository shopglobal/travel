# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Geolocation(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'latitude': 'float',
        'longitude': 'float',
        'google_maps_link': 'str'
    }

    attribute_map = {
        'latitude': 'latitude',
        'longitude': 'longitude',
        'google_maps_link': 'google_maps_link'
    }

    def __init__(self, latitude=None, longitude=None, google_maps_link=None):
        """
        Geolocation - a model defined in Swagger
        """

        self._latitude = None
        self._longitude = None
        self._google_maps_link = None

        self.latitude = latitude
        self.longitude = longitude
        if google_maps_link is not None:
          self.google_maps_link = google_maps_link

    @property
    def latitude(self):
        """
        Gets the latitude of this Geolocation.
        The north-south coordinate of this location, in decimal degrees, between -90 and 90

        :return: The latitude of this Geolocation.
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """
        Sets the latitude of this Geolocation.
        The north-south coordinate of this location, in decimal degrees, between -90 and 90

        :param latitude: The latitude of this Geolocation.
        :type: float
        """
        if latitude is None:
            raise ValueError("Invalid value for `latitude`, must not be `None`")

        self._latitude = latitude

    @property
    def longitude(self):
        """
        Gets the longitude of this Geolocation.
        The east-west coordinate of this location, in decimal degrees, between -180 and 180

        :return: The longitude of this Geolocation.
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """
        Sets the longitude of this Geolocation.
        The east-west coordinate of this location, in decimal degrees, between -180 and 180

        :param longitude: The longitude of this Geolocation.
        :type: float
        """
        if longitude is None:
            raise ValueError("Invalid value for `longitude`, must not be `None`")

        self._longitude = longitude

    @property
    def google_maps_link(self):
        """
        Gets the google_maps_link of this Geolocation.
        For YapQ APIs only  - a link to a google map rendering of this location.

        :return: The google_maps_link of this Geolocation.
        :rtype: str
        """
        return self._google_maps_link

    @google_maps_link.setter
    def google_maps_link(self, google_maps_link):
        """
        Sets the google_maps_link of this Geolocation.
        For YapQ APIs only  - a link to a google map rendering of this location.

        :param google_maps_link: The google_maps_link of this Geolocation.
        :type: str
        """

        self._google_maps_link = google_maps_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Geolocation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
