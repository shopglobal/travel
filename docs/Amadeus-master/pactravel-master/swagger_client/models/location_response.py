# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class LocationResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'CityInformation',
        'airports': 'list[AirportInformation]'
    }

    attribute_map = {
        'city': 'city',
        'airports': 'airports'
    }

    def __init__(self, city=None, airports=None):
        """
        LocationResponse - a model defined in Swagger
        """

        self._city = None
        self._airports = None

        if city is not None:
          self.city = city
        if airports is not None:
          self.airports = airports

    @property
    def city(self):
        """
        Gets the city of this LocationResponse.
        Information for any <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city which corresponds to the provided code

        :return: The city of this LocationResponse.
        :rtype: CityInformation
        """
        return self._city

    @city.setter
    def city(self, city):
        """
        Sets the city of this LocationResponse.
        Information for any <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city which corresponds to the provided code

        :param city: The city of this LocationResponse.
        :type: CityInformation
        """

        self._city = city

    @property
    def airports(self):
        """
        Gets the airports of this LocationResponse.
        Information for any IATA airport located in the provided <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city or which corresponds to the provided code

        :return: The airports of this LocationResponse.
        :rtype: list[AirportInformation]
        """
        return self._airports

    @airports.setter
    def airports(self, airports):
        """
        Sets the airports of this LocationResponse.
        Information for any IATA airport located in the provided <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city or which corresponds to the provided code

        :param airports: The airports of this LocationResponse.
        :type: list[AirportInformation]
        """

        self._airports = airports

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, LocationResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
