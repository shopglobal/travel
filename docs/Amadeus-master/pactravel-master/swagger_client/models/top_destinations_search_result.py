# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TopDestinationsSearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'str',
        'flights': 'int',
        'travelers': 'int'
    }

    attribute_map = {
        'destination': 'destination',
        'flights': 'flights',
        'travelers': 'travelers'
    }

    def __init__(self, destination=None, flights=None, travelers=None):
        """
        TopDestinationsSearchResult - a model defined in Swagger
        """

        self._destination = None
        self._flights = None
        self._travelers = None

        self.destination = destination
        if flights is not None:
          self.flights = flights
        self.travelers = travelers

    @property
    def destination(self):
        """
        Gets the destination of this TopDestinationsSearchResult.
        The <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city or airport to which the traveler may go, from the provided origin

        :return: The destination of this TopDestinationsSearchResult.
        :rtype: str
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """
        Sets the destination of this TopDestinationsSearchResult.
        The <a href=\"https://en.wikipedia.org/wiki/International_Air_Transport_Association_airport_code\">IATA code</a> of the city or airport to which the traveler may go, from the provided origin

        :param destination: The destination of this TopDestinationsSearchResult.
        :type: str
        """
        if destination is None:
            raise ValueError("Invalid value for `destination`, must not be `None`")

        self._destination = destination

    @property
    def flights(self):
        """
        Gets the flights of this TopDestinationsSearchResult.
        Number of flights from origin to destination during the search period provided. This field is deprecated.

        :return: The flights of this TopDestinationsSearchResult.
        :rtype: int
        """
        return self._flights

    @flights.setter
    def flights(self, flights):
        """
        Sets the flights of this TopDestinationsSearchResult.
        Number of flights from origin to destination during the search period provided. This field is deprecated.

        :param flights: The flights of this TopDestinationsSearchResult.
        :type: int
        """

        self._flights = flights

    @property
    def travelers(self):
        """
        Gets the travelers of this TopDestinationsSearchResult.
        Number of passengers from origin to destination during the search period provided

        :return: The travelers of this TopDestinationsSearchResult.
        :rtype: int
        """
        return self._travelers

    @travelers.setter
    def travelers(self, travelers):
        """
        Sets the travelers of this TopDestinationsSearchResult.
        Number of passengers from origin to destination during the search period provided

        :param travelers: The travelers of this TopDestinationsSearchResult.
        :type: int
        """
        if travelers is None:
            raise ValueError("Invalid value for `travelers`, must not be `None`")

        self._travelers = travelers

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TopDestinationsSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
