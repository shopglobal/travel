# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class FlightTicket(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'price': 'Amount',
        'traveler_ids': 'list[str]',
        'flight_bounds': 'list[FlightReservationBound]'
    }

    attribute_map = {
        'id': 'id',
        'price': 'price',
        'traveler_ids': 'traveler_ids',
        'flight_bounds': 'flight_bounds'
    }

    def __init__(self, id=None, price=None, traveler_ids=None, flight_bounds=None):
        """
        FlightTicket - a model defined in Swagger
        """

        self._id = None
        self._price = None
        self._traveler_ids = None
        self._flight_bounds = None

        self.id = id
        self.price = price
        self.traveler_ids = traveler_ids
        self.flight_bounds = flight_bounds

    @property
    def id(self):
        """
        Gets the id of this FlightTicket.
        Uniquely identifies this ticket in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :return: The id of this FlightTicket.
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this FlightTicket.
        Uniquely identifies this ticket in this travel record. This ID is persistent, and remains the same for the lifetime of the travel record.

        :param id: The id of this FlightTicket.
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")

        self._id = id

    @property
    def price(self):
        """
        Gets the price of this FlightTicket.
        The cost of this ticket.

        :return: The price of this FlightTicket.
        :rtype: Amount
        """
        return self._price

    @price.setter
    def price(self, price):
        """
        Sets the price of this FlightTicket.
        The cost of this ticket.

        :param price: The price of this FlightTicket.
        :type: Amount
        """
        if price is None:
            raise ValueError("Invalid value for `price`, must not be `None`")

        self._price = price

    @property
    def traveler_ids(self):
        """
        Gets the traveler_ids of this FlightTicket.
        Traveler identifiers to indicate the travelers to whom this ticket applies.

        :return: The traveler_ids of this FlightTicket.
        :rtype: list[str]
        """
        return self._traveler_ids

    @traveler_ids.setter
    def traveler_ids(self, traveler_ids):
        """
        Sets the traveler_ids of this FlightTicket.
        Traveler identifiers to indicate the travelers to whom this ticket applies.

        :param traveler_ids: The traveler_ids of this FlightTicket.
        :type: list[str]
        """
        if traveler_ids is None:
            raise ValueError("Invalid value for `traveler_ids`, must not be `None`")

        self._traveler_ids = traveler_ids

    @property
    def flight_bounds(self):
        """
        Gets the flight_bounds of this FlightTicket.
        The flight itinerary for this ticket.

        :return: The flight_bounds of this FlightTicket.
        :rtype: list[FlightReservationBound]
        """
        return self._flight_bounds

    @flight_bounds.setter
    def flight_bounds(self, flight_bounds):
        """
        Sets the flight_bounds of this FlightTicket.
        The flight itinerary for this ticket.

        :param flight_bounds: The flight_bounds of this FlightTicket.
        :type: list[FlightReservationBound]
        """
        if flight_bounds is None:
            raise ValueError("Invalid value for `flight_bounds`, must not be `None`")

        self._flight_bounds = flight_bounds

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, FlightTicket):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
