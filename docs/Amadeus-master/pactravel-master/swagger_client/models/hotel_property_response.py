# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HotelPropertyResponse(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'property_code': 'str',
        'property_name': 'str',
        'location': 'Geolocation',
        'address': 'Address',
        'total_price': 'Amount',
        'min_daily_rate': 'Amount',
        'contacts': 'list[Contact]',
        'amenities': 'list[Amenity]',
        'awards': 'list[Award]',
        'images': 'list[Image]',
        'rooms': 'list[HotelRoom]',
        'more_rooms_at_this_hotel': 'Link'
    }

    attribute_map = {
        'property_code': 'property_code',
        'property_name': 'property_name',
        'location': 'location',
        'address': 'address',
        'total_price': 'total_price',
        'min_daily_rate': 'min_daily_rate',
        'contacts': 'contacts',
        'amenities': 'amenities',
        'awards': 'awards',
        'images': 'images',
        'rooms': 'rooms',
        'more_rooms_at_this_hotel': 'more_rooms_at_this_hotel'
    }

    def __init__(self, property_code=None, property_name=None, location=None, address=None, total_price=None, min_daily_rate=None, contacts=None, amenities=None, awards=None, images=None, rooms=None, more_rooms_at_this_hotel=None):
        """
        HotelPropertyResponse - a model defined in Swagger
        """

        self._property_code = None
        self._property_name = None
        self._location = None
        self._address = None
        self._total_price = None
        self._min_daily_rate = None
        self._contacts = None
        self._amenities = None
        self._awards = None
        self._images = None
        self._rooms = None
        self._more_rooms_at_this_hotel = None

        self.property_code = property_code
        self.property_name = property_name
        self.location = location
        if address is not None:
          self.address = address
        self.total_price = total_price
        self.min_daily_rate = min_daily_rate
        if contacts is not None:
          self.contacts = contacts
        if amenities is not None:
          self.amenities = amenities
        if awards is not None:
          self.awards = awards
        if images is not None:
          self.images = images
        if rooms is not None:
          self.rooms = rooms
        if more_rooms_at_this_hotel is not None:
          self.more_rooms_at_this_hotel = more_rooms_at_this_hotel

    @property
    def property_code(self):
        """
        Gets the property_code of this HotelPropertyResponse.
        The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.

        :return: The property_code of this HotelPropertyResponse.
        :rtype: str
        """
        return self._property_code

    @property_code.setter
    def property_code(self, property_code):
        """
        Sets the property_code of this HotelPropertyResponse.
        The 8 character property code of this given hotel. The first 2 characters of this code are the chain code that can be specified in the input. The remaining elements are proprietary to each hotel chain.

        :param property_code: The property_code of this HotelPropertyResponse.
        :type: str
        """
        if property_code is None:
            raise ValueError("Invalid value for `property_code`, must not be `None`")

        self._property_code = property_code

    @property
    def property_name(self):
        """
        Gets the property_name of this HotelPropertyResponse.
        The name of this hotel.

        :return: The property_name of this HotelPropertyResponse.
        :rtype: str
        """
        return self._property_name

    @property_name.setter
    def property_name(self, property_name):
        """
        Sets the property_name of this HotelPropertyResponse.
        The name of this hotel.

        :param property_name: The property_name of this HotelPropertyResponse.
        :type: str
        """
        if property_name is None:
            raise ValueError("Invalid value for `property_name`, must not be `None`")

        self._property_name = property_name

    @property
    def location(self):
        """
        Gets the location of this HotelPropertyResponse.

        :return: The location of this HotelPropertyResponse.
        :rtype: Geolocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this HotelPropertyResponse.

        :param location: The location of this HotelPropertyResponse.
        :type: Geolocation
        """
        if location is None:
            raise ValueError("Invalid value for `location`, must not be `None`")

        self._location = location

    @property
    def address(self):
        """
        Gets the address of this HotelPropertyResponse.

        :return: The address of this HotelPropertyResponse.
        :rtype: Address
        """
        return self._address

    @address.setter
    def address(self, address):
        """
        Sets the address of this HotelPropertyResponse.

        :param address: The address of this HotelPropertyResponse.
        :type: Address
        """

        self._address = address

    @property
    def total_price(self):
        """
        Gets the total_price of this HotelPropertyResponse.
        The lowest price of a stay, from the given check in date to the given check out date.

        :return: The total_price of this HotelPropertyResponse.
        :rtype: Amount
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """
        Sets the total_price of this HotelPropertyResponse.
        The lowest price of a stay, from the given check in date to the given check out date.

        :param total_price: The total_price of this HotelPropertyResponse.
        :type: Amount
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")

        self._total_price = total_price

    @property
    def min_daily_rate(self):
        """
        Gets the min_daily_rate of this HotelPropertyResponse.
        The lowest price per day that the hotel offers between the given check-in and check-out dates. Extra taxes may apply to this rate.

        :return: The min_daily_rate of this HotelPropertyResponse.
        :rtype: Amount
        """
        return self._min_daily_rate

    @min_daily_rate.setter
    def min_daily_rate(self, min_daily_rate):
        """
        Sets the min_daily_rate of this HotelPropertyResponse.
        The lowest price per day that the hotel offers between the given check-in and check-out dates. Extra taxes may apply to this rate.

        :param min_daily_rate: The min_daily_rate of this HotelPropertyResponse.
        :type: Amount
        """
        if min_daily_rate is None:
            raise ValueError("Invalid value for `min_daily_rate`, must not be `None`")

        self._min_daily_rate = min_daily_rate

    @property
    def contacts(self):
        """
        Gets the contacts of this HotelPropertyResponse.
        An array of contact objects to tell the user how to contact the hotel. Typically includes a phone and fax number

        :return: The contacts of this HotelPropertyResponse.
        :rtype: list[Contact]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """
        Sets the contacts of this HotelPropertyResponse.
        An array of contact objects to tell the user how to contact the hotel. Typically includes a phone and fax number

        :param contacts: The contacts of this HotelPropertyResponse.
        :type: list[Contact]
        """

        self._contacts = contacts

    @property
    def amenities(self):
        """
        Gets the amenities of this HotelPropertyResponse.
        An array of amenity objects to the user what facilities this hotel might provide, such as a pool or parking.  If this array is empty, it does not necessarily mean that there are no amenities available at this hotel, it could also mean that the hotel does not list their amenities in our search! 

        :return: The amenities of this HotelPropertyResponse.
        :rtype: list[Amenity]
        """
        return self._amenities

    @amenities.setter
    def amenities(self, amenities):
        """
        Sets the amenities of this HotelPropertyResponse.
        An array of amenity objects to the user what facilities this hotel might provide, such as a pool or parking.  If this array is empty, it does not necessarily mean that there are no amenities available at this hotel, it could also mean that the hotel does not list their amenities in our search! 

        :param amenities: The amenities of this HotelPropertyResponse.
        :type: list[Amenity]
        """

        self._amenities = amenities

    @property
    def awards(self):
        """
        Gets the awards of this HotelPropertyResponse.
        An array of hotel award objects to give the user an expectation of the service quality at this hotel. This can be used to indicate, for example, the star rating of a hotel. If this array is empty, it does not necessarily mean that the hotel has no awards, it could simply mean that they didn't tell us about them!

        :return: The awards of this HotelPropertyResponse.
        :rtype: list[Award]
        """
        return self._awards

    @awards.setter
    def awards(self, awards):
        """
        Sets the awards of this HotelPropertyResponse.
        An array of hotel award objects to give the user an expectation of the service quality at this hotel. This can be used to indicate, for example, the star rating of a hotel. If this array is empty, it does not necessarily mean that the hotel has no awards, it could simply mean that they didn't tell us about them!

        :param awards: The awards of this HotelPropertyResponse.
        :type: list[Award]
        """

        self._awards = awards

    @property
    def images(self):
        """
        Gets the images of this HotelPropertyResponse.
        A selection of image objects, showing pictures of the hotel building, the entrance or some rooms, to give an indication of what to expect at this hotel. Note that redistribution of images outside Amadeus products requires licensing from our image providers: Leonardo and Ice Portal. Thus image links are returned for whitelisted Amadeus users only.

        :return: The images of this HotelPropertyResponse.
        :rtype: list[Image]
        """
        return self._images

    @images.setter
    def images(self, images):
        """
        Sets the images of this HotelPropertyResponse.
        A selection of image objects, showing pictures of the hotel building, the entrance or some rooms, to give an indication of what to expect at this hotel. Note that redistribution of images outside Amadeus products requires licensing from our image providers: Leonardo and Ice Portal. Thus image links are returned for whitelisted Amadeus users only.

        :param images: The images of this HotelPropertyResponse.
        :type: list[Image]
        """

        self._images = images

    @property
    def rooms(self):
        """
        Gets the rooms of this HotelPropertyResponse.
        Information on currently available rooms at this hotel.

        :return: The rooms of this HotelPropertyResponse.
        :rtype: list[HotelRoom]
        """
        return self._rooms

    @rooms.setter
    def rooms(self, rooms):
        """
        Sets the rooms of this HotelPropertyResponse.
        Information on currently available rooms at this hotel.

        :param rooms: The rooms of this HotelPropertyResponse.
        :type: list[HotelRoom]
        """

        self._rooms = rooms

    @property
    def more_rooms_at_this_hotel(self):
        """
        Gets the more_rooms_at_this_hotel of this HotelPropertyResponse.
        Provides a ready-to-use link to make a follow up request to find more available rooms at this hotel

        :return: The more_rooms_at_this_hotel of this HotelPropertyResponse.
        :rtype: Link
        """
        return self._more_rooms_at_this_hotel

    @more_rooms_at_this_hotel.setter
    def more_rooms_at_this_hotel(self, more_rooms_at_this_hotel):
        """
        Sets the more_rooms_at_this_hotel of this HotelPropertyResponse.
        Provides a ready-to-use link to make a follow up request to find more available rooms at this hotel

        :param more_rooms_at_this_hotel: The more_rooms_at_this_hotel of this HotelPropertyResponse.
        :type: Link
        """

        self._more_rooms_at_this_hotel = more_rooms_at_this_hotel

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HotelPropertyResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
