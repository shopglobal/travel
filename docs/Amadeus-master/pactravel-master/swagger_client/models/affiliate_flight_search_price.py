# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AffiliateFlightSearchPrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'currency': 'str',
        'total_price': 'str',
        'price_per_adult': 'Fare',
        'price_per_child': 'Fare',
        'price_per_infant': 'Fare',
        'restrictions': 'FareRestrictions'
    }

    attribute_map = {
        'currency': 'currency',
        'total_price': 'total_price',
        'price_per_adult': 'price_per_adult',
        'price_per_child': 'price_per_child',
        'price_per_infant': 'price_per_infant',
        'restrictions': 'restrictions'
    }

    def __init__(self, currency=None, total_price=None, price_per_adult=None, price_per_child=None, price_per_infant=None, restrictions=None):
        """
        AffiliateFlightSearchPrice - a model defined in Swagger
        """

        self._currency = None
        self._total_price = None
        self._price_per_adult = None
        self._price_per_child = None
        self._price_per_infant = None
        self._restrictions = None

        self.currency = currency
        self.total_price = total_price
        self.price_per_adult = price_per_adult
        if price_per_child is not None:
          self.price_per_child = price_per_child
        if price_per_infant is not None:
          self.price_per_infant = price_per_infant
        self.restrictions = restrictions

    @property
    def currency(self):
        """
        Gets the currency of this AffiliateFlightSearchPrice.
        The <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">currency</a> code applicable to this fare

        :return: The currency of this AffiliateFlightSearchPrice.
        :rtype: str
        """
        return self._currency

    @currency.setter
    def currency(self, currency):
        """
        Sets the currency of this AffiliateFlightSearchPrice.
        The <a href=\"https://en.wikipedia.org/wiki/ISO_4217\">currency</a> code applicable to this fare

        :param currency: The currency of this AffiliateFlightSearchPrice.
        :type: str
        """
        if currency is None:
            raise ValueError("Invalid value for `currency`, must not be `None`")

        self._currency = currency

    @property
    def total_price(self):
        """
        Gets the total_price of this AffiliateFlightSearchPrice.
        The total price for all the requested passengers for this flight

        :return: The total_price of this AffiliateFlightSearchPrice.
        :rtype: str
        """
        return self._total_price

    @total_price.setter
    def total_price(self, total_price):
        """
        Sets the total_price of this AffiliateFlightSearchPrice.
        The total price for all the requested passengers for this flight

        :param total_price: The total_price of this AffiliateFlightSearchPrice.
        :type: str
        """
        if total_price is None:
            raise ValueError("Invalid value for `total_price`, must not be `None`")

        self._total_price = total_price

    @property
    def price_per_adult(self):
        """
        Gets the price_per_adult of this AffiliateFlightSearchPrice.
        The per-passenger fare for each adult on this flight

        :return: The price_per_adult of this AffiliateFlightSearchPrice.
        :rtype: Fare
        """
        return self._price_per_adult

    @price_per_adult.setter
    def price_per_adult(self, price_per_adult):
        """
        Sets the price_per_adult of this AffiliateFlightSearchPrice.
        The per-passenger fare for each adult on this flight

        :param price_per_adult: The price_per_adult of this AffiliateFlightSearchPrice.
        :type: Fare
        """
        if price_per_adult is None:
            raise ValueError("Invalid value for `price_per_adult`, must not be `None`")

        self._price_per_adult = price_per_adult

    @property
    def price_per_child(self):
        """
        Gets the price_per_child of this AffiliateFlightSearchPrice.
        The per-passenger fare for each child on this flight

        :return: The price_per_child of this AffiliateFlightSearchPrice.
        :rtype: Fare
        """
        return self._price_per_child

    @price_per_child.setter
    def price_per_child(self, price_per_child):
        """
        Sets the price_per_child of this AffiliateFlightSearchPrice.
        The per-passenger fare for each child on this flight

        :param price_per_child: The price_per_child of this AffiliateFlightSearchPrice.
        :type: Fare
        """

        self._price_per_child = price_per_child

    @property
    def price_per_infant(self):
        """
        Gets the price_per_infant of this AffiliateFlightSearchPrice.
        The per-passenger fare for each infant on this flight

        :return: The price_per_infant of this AffiliateFlightSearchPrice.
        :rtype: Fare
        """
        return self._price_per_infant

    @price_per_infant.setter
    def price_per_infant(self, price_per_infant):
        """
        Sets the price_per_infant of this AffiliateFlightSearchPrice.
        The per-passenger fare for each infant on this flight

        :param price_per_infant: The price_per_infant of this AffiliateFlightSearchPrice.
        :type: Fare
        """

        self._price_per_infant = price_per_infant

    @property
    def restrictions(self):
        """
        Gets the restrictions of this AffiliateFlightSearchPrice.
        The restrictions associated with this fare

        :return: The restrictions of this AffiliateFlightSearchPrice.
        :rtype: FareRestrictions
        """
        return self._restrictions

    @restrictions.setter
    def restrictions(self, restrictions):
        """
        Sets the restrictions of this AffiliateFlightSearchPrice.
        The restrictions associated with this fare

        :param restrictions: The restrictions of this AffiliateFlightSearchPrice.
        :type: FareRestrictions
        """
        if restrictions is None:
            raise ValueError("Invalid value for `restrictions`, must not be `None`")

        self._restrictions = restrictions

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AffiliateFlightSearchPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
