# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Image(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'category': 'str',
        'width': 'int',
        'height': 'int',
        'url': 'str'
    }

    attribute_map = {
        'category': 'category',
        'width': 'width',
        'height': 'height',
        'url': 'url'
    }

    def __init__(self, category=None, width=None, height=None, url=None):
        """
        Image - a model defined in Swagger
        """

        self._category = None
        self._width = None
        self._height = None
        self._url = None

        if category is not None:
          self.category = category
        if width is not None:
          self.width = width
        if height is not None:
          self.height = height
        self.url = url

    @property
    def category(self):
        """
        Gets the category of this Image.
        The enumerated category of this image type. Common values include EXTERIOR, GUEST_ROOM, SUITE, LOBBY, RESTAURANT, LOUNGE, LOGO, MAP, MISC and UNKNOWN.

        :return: The category of this Image.
        :rtype: str
        """
        return self._category

    @category.setter
    def category(self, category):
        """
        Sets the category of this Image.
        The enumerated category of this image type. Common values include EXTERIOR, GUEST_ROOM, SUITE, LOBBY, RESTAURANT, LOUNGE, LOGO, MAP, MISC and UNKNOWN.

        :param category: The category of this Image.
        :type: str
        """

        self._category = category

    @property
    def width(self):
        """
        Gets the width of this Image.
        The pixel width of the image at the provided URL.

        :return: The width of this Image.
        :rtype: int
        """
        return self._width

    @width.setter
    def width(self, width):
        """
        Sets the width of this Image.
        The pixel width of the image at the provided URL.

        :param width: The width of this Image.
        :type: int
        """

        self._width = width

    @property
    def height(self):
        """
        Gets the height of this Image.
        The pixel height of the image at the provided URL.

        :return: The height of this Image.
        :rtype: int
        """
        return self._height

    @height.setter
    def height(self, height):
        """
        Sets the height of this Image.
        The pixel height of the image at the provided URL.

        :param height: The height of this Image.
        :type: int
        """

        self._height = height

    @property
    def url(self):
        """
        Gets the url of this Image.
        The URL of the hotel image of this given category and size, for display.

        :return: The url of this Image.
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """
        Sets the url of this Image.
        The URL of the hotel image of this given category and size, for display.

        :param url: The url of this Image.
        :type: str
        """
        if url is None:
            raise ValueError("Invalid value for `url`, must not be `None`")

        self._url = url

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Image):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
