# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class RoomInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bed_type': 'str',
        'number_of_beds': 'str',
        'room_type': 'str'
    }

    attribute_map = {
        'bed_type': 'bed_type',
        'number_of_beds': 'number_of_beds',
        'room_type': 'room_type'
    }

    def __init__(self, bed_type=None, number_of_beds=None, room_type=None):
        """
        RoomInfo - a model defined in Swagger
        """

        self._bed_type = None
        self._number_of_beds = None
        self._room_type = None

        self.bed_type = bed_type
        self.number_of_beds = number_of_beds
        self.room_type = room_type

    @property
    def bed_type(self):
        """
        Gets the bed_type of this RoomInfo.
        The type of bed or beds in the room, such as Double, or King.

        :return: The bed_type of this RoomInfo.
        :rtype: str
        """
        return self._bed_type

    @bed_type.setter
    def bed_type(self, bed_type):
        """
        Sets the bed_type of this RoomInfo.
        The type of bed or beds in the room, such as Double, or King.

        :param bed_type: The bed_type of this RoomInfo.
        :type: str
        """
        if bed_type is None:
            raise ValueError("Invalid value for `bed_type`, must not be `None`")

        self._bed_type = bed_type

    @property
    def number_of_beds(self):
        """
        Gets the number_of_beds of this RoomInfo.
        The number of beds in the room. May be an integer or a free-text dessciption, as provided by the hotel

        :return: The number_of_beds of this RoomInfo.
        :rtype: str
        """
        return self._number_of_beds

    @number_of_beds.setter
    def number_of_beds(self, number_of_beds):
        """
        Sets the number_of_beds of this RoomInfo.
        The number of beds in the room. May be an integer or a free-text dessciption, as provided by the hotel

        :param number_of_beds: The number_of_beds of this RoomInfo.
        :type: str
        """
        if number_of_beds is None:
            raise ValueError("Invalid value for `number_of_beds`, must not be `None`")

        self._number_of_beds = number_of_beds

    @property
    def room_type(self):
        """
        Gets the room_type of this RoomInfo.
        Free-text indicating the type of room - such Smoking, No Smoking, Suite, etc..

        :return: The room_type of this RoomInfo.
        :rtype: str
        """
        return self._room_type

    @room_type.setter
    def room_type(self, room_type):
        """
        Sets the room_type of this RoomInfo.
        Free-text indicating the type of room - such Smoking, No Smoking, Suite, etc..

        :param room_type: The room_type of this RoomInfo.
        :type: str
        """
        if room_type is None:
            raise ValueError("Invalid value for `room_type`, must not be `None`")

        self._room_type = room_type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, RoomInfo):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
