# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TravelRecordHeader(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'creation_office_id': 'str',
        'owner_office_id': 'str'
    }

    attribute_map = {
        'creation_office_id': 'creation_office_id',
        'owner_office_id': 'owner_office_id'
    }

    def __init__(self, creation_office_id=None, owner_office_id=None):
        """
        TravelRecordHeader - a model defined in Swagger
        """

        self._creation_office_id = None
        self._owner_office_id = None

        self.creation_office_id = creation_office_id
        self.owner_office_id = owner_office_id

    @property
    def creation_office_id(self):
        """
        Gets the creation_office_id of this TravelRecordHeader.
        9 character Amadeus office identifier of the travel agency that created this travel record. An office ID may be considered as equivalent to a <a href=\"https://en.wikipedia.org/wiki/Pseudo_city_code\">PCC</a> in other reservation systems.

        :return: The creation_office_id of this TravelRecordHeader.
        :rtype: str
        """
        return self._creation_office_id

    @creation_office_id.setter
    def creation_office_id(self, creation_office_id):
        """
        Sets the creation_office_id of this TravelRecordHeader.
        9 character Amadeus office identifier of the travel agency that created this travel record. An office ID may be considered as equivalent to a <a href=\"https://en.wikipedia.org/wiki/Pseudo_city_code\">PCC</a> in other reservation systems.

        :param creation_office_id: The creation_office_id of this TravelRecordHeader.
        :type: str
        """
        if creation_office_id is None:
            raise ValueError("Invalid value for `creation_office_id`, must not be `None`")

        self._creation_office_id = creation_office_id

    @property
    def owner_office_id(self):
        """
        Gets the owner_office_id of this TravelRecordHeader.
        9 character Amadeus office identifier of the travel agency that owns and manages this travel record.

        :return: The owner_office_id of this TravelRecordHeader.
        :rtype: str
        """
        return self._owner_office_id

    @owner_office_id.setter
    def owner_office_id(self, owner_office_id):
        """
        Sets the owner_office_id of this TravelRecordHeader.
        9 character Amadeus office identifier of the travel agency that owns and manages this travel record.

        :param owner_office_id: The owner_office_id of this TravelRecordHeader.
        :type: str
        """
        if owner_office_id is None:
            raise ValueError("Invalid value for `owner_office_id`, must not be `None`")

        self._owner_office_id = owner_office_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TravelRecordHeader):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
