# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class PointOfInterestDetails(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'short_description': 'str',
        'description': 'str',
        'wiki_page_link': 'str'
    }

    attribute_map = {
        'short_description': 'short_description',
        'description': 'description',
        'wiki_page_link': 'wiki_page_link'
    }

    def __init__(self, short_description=None, description=None, wiki_page_link=None):
        """
        PointOfInterestDetails - a model defined in Swagger
        """

        self._short_description = None
        self._description = None
        self._wiki_page_link = None

        self.short_description = short_description
        self.description = description
        self.wiki_page_link = wiki_page_link

    @property
    def short_description(self):
        """
        Gets the short_description of this PointOfInterestDetails.
        A summary of the given point

        :return: The short_description of this PointOfInterestDetails.
        :rtype: str
        """
        return self._short_description

    @short_description.setter
    def short_description(self, short_description):
        """
        Sets the short_description of this PointOfInterestDetails.
        A summary of the given point

        :param short_description: The short_description of this PointOfInterestDetails.
        :type: str
        """
        if short_description is None:
            raise ValueError("Invalid value for `short_description`, must not be `None`")

        self._short_description = short_description

    @property
    def description(self):
        """
        Gets the description of this PointOfInterestDetails.
        A paragraph describing this point of interest

        :return: The description of this PointOfInterestDetails.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this PointOfInterestDetails.
        A paragraph describing this point of interest

        :param description: The description of this PointOfInterestDetails.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def wiki_page_link(self):
        """
        Gets the wiki_page_link of this PointOfInterestDetails.
        A link to this point of interest&quot;s wikipedia page

        :return: The wiki_page_link of this PointOfInterestDetails.
        :rtype: str
        """
        return self._wiki_page_link

    @wiki_page_link.setter
    def wiki_page_link(self, wiki_page_link):
        """
        Sets the wiki_page_link of this PointOfInterestDetails.
        A link to this point of interest&quot;s wikipedia page

        :param wiki_page_link: The wiki_page_link of this PointOfInterestDetails.
        :type: str
        """
        if wiki_page_link is None:
            raise ValueError("Invalid value for `wiki_page_link`, must not be `None`")

        self._wiki_page_link = wiki_page_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, PointOfInterestDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
