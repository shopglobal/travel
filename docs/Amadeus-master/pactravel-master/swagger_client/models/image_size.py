# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImageSize(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'small': 'Image',
        'medium': 'Image',
        'large': 'Image',
        'hd': 'Image'
    }

    attribute_map = {
        'small': 'small',
        'medium': 'medium',
        'large': 'large',
        'hd': 'hd'
    }

    def __init__(self, small=None, medium=None, large=None, hd=None):
        """
        ImageSize - a model defined in Swagger
        """

        self._small = None
        self._medium = None
        self._large = None
        self._hd = None

        if small is not None:
          self.small = small
        if medium is not None:
          self.medium = medium
        if large is not None:
          self.large = large
        if hd is not None:
          self.hd = hd

    @property
    def small(self):
        """
        Gets the small of this ImageSize.

        :return: The small of this ImageSize.
        :rtype: Image
        """
        return self._small

    @small.setter
    def small(self, small):
        """
        Sets the small of this ImageSize.

        :param small: The small of this ImageSize.
        :type: Image
        """

        self._small = small

    @property
    def medium(self):
        """
        Gets the medium of this ImageSize.

        :return: The medium of this ImageSize.
        :rtype: Image
        """
        return self._medium

    @medium.setter
    def medium(self, medium):
        """
        Sets the medium of this ImageSize.

        :param medium: The medium of this ImageSize.
        :type: Image
        """

        self._medium = medium

    @property
    def large(self):
        """
        Gets the large of this ImageSize.

        :return: The large of this ImageSize.
        :rtype: Image
        """
        return self._large

    @large.setter
    def large(self, large):
        """
        Sets the large of this ImageSize.

        :param large: The large of this ImageSize.
        :type: Image
        """

        self._large = large

    @property
    def hd(self):
        """
        Gets the hd of this ImageSize.

        :return: The hd of this ImageSize.
        :rtype: Image
        """
        return self._hd

    @hd.setter
    def hd(self, hd):
        """
        Sets the hd of this ImageSize.

        :param hd: The hd of this ImageSize.
        :type: Image
        """

        self._hd = hd

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImageSize):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
