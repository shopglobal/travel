# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AffiliatePayout(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cpc': 'Amount',
        'cpa': 'Amount',
        'cps': 'Amount'
    }

    attribute_map = {
        'cpc': 'CPC',
        'cpa': 'CPA',
        'cps': 'CPS'
    }

    def __init__(self, cpc=None, cpa=None, cps=None):
        """
        AffiliatePayout - a model defined in Swagger
        """

        self._cpc = None
        self._cpa = None
        self._cps = None

        if cpc is not None:
          self.cpc = cpc
        if cpa is not None:
          self.cpa = cpa
        if cps is not None:
          self.cps = cps

    @property
    def cpc(self):
        """
        Gets the cpc of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_click for commission earned when the provided deep link is clicked

        :return: The cpc of this AffiliatePayout.
        :rtype: Amount
        """
        return self._cpc

    @cpc.setter
    def cpc(self, cpc):
        """
        Sets the cpc of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_click for commission earned when the provided deep link is clicked

        :param cpc: The cpc of this AffiliatePayout.
        :type: Amount
        """

        self._cpc = cpc

    @property
    def cpa(self):
        """
        Gets the cpa of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Cost_per_action for commission earned for a given action from the provided deep link

        :return: The cpa of this AffiliatePayout.
        :rtype: Amount
        """
        return self._cpa

    @cpa.setter
    def cpa(self, cpa):
        """
        Sets the cpa of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Cost_per_action for commission earned for a given action from the provided deep link

        :param cpa: The cpa of this AffiliatePayout.
        :type: Amount
        """

        self._cpa = cpa

    @property
    def cps(self):
        """
        Gets the cps of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_sale for commission earned as a result of a booking made from the provided deep link

        :return: The cps of this AffiliatePayout.
        :rtype: Amount
        """
        return self._cps

    @cps.setter
    def cps(self, cps):
        """
        Sets the cps of this AffiliatePayout.
        See https://en.wikipedia.org/wiki/Pay_per_sale for commission earned as a result of a booking made from the provided deep link

        :param cps: The cps of this AffiliatePayout.
        :type: Amount
        """

        self._cps = cps

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AffiliatePayout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
