# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class HotelRoom(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'booking_code': 'str',
        'room_type_code': 'str',
        'rate_plan_code': 'str',
        'total_amount': 'Amount',
        'rates': 'list[PeriodRate]',
        'descriptions': 'list[str]',
        'room_type_info': 'RoomInfo',
        'rate_type_code': 'str'
    }

    attribute_map = {
        'booking_code': 'booking_code',
        'room_type_code': 'room_type_code',
        'rate_plan_code': 'rate_plan_code',
        'total_amount': 'total_amount',
        'rates': 'rates',
        'descriptions': 'descriptions',
        'room_type_info': 'room_type_info',
        'rate_type_code': 'rate_type_code'
    }

    def __init__(self, booking_code=None, room_type_code=None, rate_plan_code=None, total_amount=None, rates=None, descriptions=None, room_type_info=None, rate_type_code=None):
        """
        HotelRoom - a model defined in Swagger
        """

        self._booking_code = None
        self._room_type_code = None
        self._rate_plan_code = None
        self._total_amount = None
        self._rates = None
        self._descriptions = None
        self._room_type_info = None
        self._rate_type_code = None

        self.booking_code = booking_code
        if room_type_code is not None:
          self.room_type_code = room_type_code
        if rate_plan_code is not None:
          self.rate_plan_code = rate_plan_code
        if total_amount is not None:
          self.total_amount = total_amount
        if rates is not None:
          self.rates = rates
        if descriptions is not None:
          self.descriptions = descriptions
        if room_type_info is not None:
          self.room_type_info = room_type_info
        if rate_type_code is not None:
          self.rate_type_code = rate_type_code

    @property
    def booking_code(self):
        """
        Gets the booking_code of this HotelRoom.
        The booking code identifies a product at the hotel. It can be used to book a room.

        :return: The booking_code of this HotelRoom.
        :rtype: str
        """
        return self._booking_code

    @booking_code.setter
    def booking_code(self, booking_code):
        """
        Sets the booking_code of this HotelRoom.
        The booking code identifies a product at the hotel. It can be used to book a room.

        :param booking_code: The booking_code of this HotelRoom.
        :type: str
        """
        if booking_code is None:
            raise ValueError("Invalid value for `booking_code`, must not be `None`")

        self._booking_code = booking_code

    @property
    def room_type_code(self):
        """
        Gets the room_type_code of this HotelRoom.
        A 3-letter code to identify a specific room type.

        :return: The room_type_code of this HotelRoom.
        :rtype: str
        """
        return self._room_type_code

    @room_type_code.setter
    def room_type_code(self, room_type_code):
        """
        Sets the room_type_code of this HotelRoom.
        A 3-letter code to identify a specific room type.

        :param room_type_code: The room_type_code of this HotelRoom.
        :type: str
        """

        self._room_type_code = room_type_code

    @property
    def rate_plan_code(self):
        """
        Gets the rate_plan_code of this HotelRoom.
        A 3 letter code to designate different rates base on traveler type.

        :return: The rate_plan_code of this HotelRoom.
        :rtype: str
        """
        return self._rate_plan_code

    @rate_plan_code.setter
    def rate_plan_code(self, rate_plan_code):
        """
        Sets the rate_plan_code of this HotelRoom.
        A 3 letter code to designate different rates base on traveler type.

        :param rate_plan_code: The rate_plan_code of this HotelRoom.
        :type: str
        """

        self._rate_plan_code = rate_plan_code

    @property
    def total_amount(self):
        """
        Gets the total_amount of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :return: The total_amount of this HotelRoom.
        :rtype: Amount
        """
        return self._total_amount

    @total_amount.setter
    def total_amount(self, total_amount):
        """
        Sets the total_amount of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :param total_amount: The total_amount of this HotelRoom.
        :type: Amount
        """

        self._total_amount = total_amount

    @property
    def rates(self):
        """
        Gets the rates of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :return: The rates of this HotelRoom.
        :rtype: list[PeriodRate]
        """
        return self._rates

    @rates.setter
    def rates(self, rates):
        """
        Sets the rates of this HotelRoom.
        The total price of staying in this room from the given check-in date to the given check-out date

        :param rates: The rates of this HotelRoom.
        :type: list[PeriodRate]
        """

        self._rates = rates

    @property
    def descriptions(self):
        """
        Gets the descriptions of this HotelRoom.
        An array of description strings describing room and rate types features

        :return: The descriptions of this HotelRoom.
        :rtype: list[str]
        """
        return self._descriptions

    @descriptions.setter
    def descriptions(self, descriptions):
        """
        Sets the descriptions of this HotelRoom.
        An array of description strings describing room and rate types features

        :param descriptions: The descriptions of this HotelRoom.
        :type: list[str]
        """

        self._descriptions = descriptions

    @property
    def room_type_info(self):
        """
        Gets the room_type_info of this HotelRoom.

        :return: The room_type_info of this HotelRoom.
        :rtype: RoomInfo
        """
        return self._room_type_info

    @room_type_info.setter
    def room_type_info(self, room_type_info):
        """
        Sets the room_type_info of this HotelRoom.

        :param room_type_info: The room_type_info of this HotelRoom.
        :type: RoomInfo
        """

        self._room_type_info = room_type_info

    @property
    def rate_type_code(self):
        """
        Gets the rate_type_code of this HotelRoom.
        The unique rate code used by the hotel chain to price this room's rate

        :return: The rate_type_code of this HotelRoom.
        :rtype: str
        """
        return self._rate_type_code

    @rate_type_code.setter
    def rate_type_code(self, rate_type_code):
        """
        Sets the rate_type_code of this HotelRoom.
        The unique rate code used by the hotel chain to price this room's rate

        :param rate_type_code: The rate_type_code of this HotelRoom.
        :type: str
        """

        self._rate_type_code = rate_type_code

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, HotelRoom):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
