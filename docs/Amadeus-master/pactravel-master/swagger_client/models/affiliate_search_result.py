# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AffiliateSearchResult(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outbound': 'FlightSearchBound',
        'inbound': 'FlightSearchBound',
        'fare': 'AffiliateFlightSearchPrice',
        'payout': 'AffiliatePayout',
        'airline': 'str',
        'deep_link': 'str'
    }

    attribute_map = {
        'outbound': 'outbound',
        'inbound': 'inbound',
        'fare': 'fare',
        'payout': 'payout',
        'airline': 'airline',
        'deep_link': 'deep_link'
    }

    def __init__(self, outbound=None, inbound=None, fare=None, payout=None, airline=None, deep_link=None):
        """
        AffiliateSearchResult - a model defined in Swagger
        """

        self._outbound = None
        self._inbound = None
        self._fare = None
        self._payout = None
        self._airline = None
        self._deep_link = None

        self.outbound = outbound
        if inbound is not None:
          self.inbound = inbound
        self.fare = fare
        self.payout = payout
        self.airline = airline
        self.deep_link = deep_link

    @property
    def outbound(self):
        """
        Gets the outbound of this AffiliateSearchResult.
        The flight from the origin to the destination

        :return: The outbound of this AffiliateSearchResult.
        :rtype: FlightSearchBound
        """
        return self._outbound

    @outbound.setter
    def outbound(self, outbound):
        """
        Sets the outbound of this AffiliateSearchResult.
        The flight from the origin to the destination

        :param outbound: The outbound of this AffiliateSearchResult.
        :type: FlightSearchBound
        """
        if outbound is None:
            raise ValueError("Invalid value for `outbound`, must not be `None`")

        self._outbound = outbound

    @property
    def inbound(self):
        """
        Gets the inbound of this AffiliateSearchResult.
        The return flight from the destination to the origin

        :return: The inbound of this AffiliateSearchResult.
        :rtype: FlightSearchBound
        """
        return self._inbound

    @inbound.setter
    def inbound(self, inbound):
        """
        Sets the inbound of this AffiliateSearchResult.
        The return flight from the destination to the origin

        :param inbound: The inbound of this AffiliateSearchResult.
        :type: FlightSearchBound
        """

        self._inbound = inbound

    @property
    def fare(self):
        """
        Gets the fare of this AffiliateSearchResult.
        The price and fare information which applies to all itineraries in this response

        :return: The fare of this AffiliateSearchResult.
        :rtype: AffiliateFlightSearchPrice
        """
        return self._fare

    @fare.setter
    def fare(self, fare):
        """
        Sets the fare of this AffiliateSearchResult.
        The price and fare information which applies to all itineraries in this response

        :param fare: The fare of this AffiliateSearchResult.
        :type: AffiliateFlightSearchPrice
        """
        if fare is None:
            raise ValueError("Invalid value for `fare`, must not be `None`")

        self._fare = fare

    @property
    def payout(self):
        """
        Gets the payout of this AffiliateSearchResult.
        Details of the amount of payout that the affiliate will received per click or if this flight is sold

        :return: The payout of this AffiliateSearchResult.
        :rtype: AffiliatePayout
        """
        return self._payout

    @payout.setter
    def payout(self, payout):
        """
        Sets the payout of this AffiliateSearchResult.
        Details of the amount of payout that the affiliate will received per click or if this flight is sold

        :param payout: The payout of this AffiliateSearchResult.
        :type: AffiliatePayout
        """
        if payout is None:
            raise ValueError("Invalid value for `payout`, must not be `None`")

        self._payout = payout

    @property
    def airline(self):
        """
        Gets the airline of this AffiliateSearchResult.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is selling this result

        :return: The airline of this AffiliateSearchResult.
        :rtype: str
        """
        return self._airline

    @airline.setter
    def airline(self, airline):
        """
        Sets the airline of this AffiliateSearchResult.
        The 2 character alphanumeric <a href=\"https://en.wikipedia.org/wiki/Airline_codes\">IATA airline code</a> of the airline that is selling this result

        :param airline: The airline of this AffiliateSearchResult.
        :type: str
        """
        if airline is None:
            raise ValueError("Invalid value for `airline`, must not be `None`")

        self._airline = airline

    @property
    def deep_link(self):
        """
        Gets the deep_link of this AffiliateSearchResult.
        A link to the page from which this result can be purchased from the affiliate

        :return: The deep_link of this AffiliateSearchResult.
        :rtype: str
        """
        return self._deep_link

    @deep_link.setter
    def deep_link(self, deep_link):
        """
        Sets the deep_link of this AffiliateSearchResult.
        A link to the page from which this result can be purchased from the affiliate

        :param deep_link: The deep_link of this AffiliateSearchResult.
        :type: str
        """
        if deep_link is None:
            raise ValueError("Invalid value for `deep_link`, must not be `None`")

        self._deep_link = deep_link

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AffiliateSearchResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
