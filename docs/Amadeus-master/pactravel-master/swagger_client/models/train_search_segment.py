# coding: utf-8

"""
    Amadeus Travel Innovation Sandbox

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.2
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TrainSearchSegment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'departs_at': 'str',
        'arrives_at': 'str',
        'departure_station': 'Station',
        'arrival_station': 'Airport',
        'marketing_company': 'str',
        'operating_company': 'str',
        'train_number': 'str',
        'train_type': 'str',
        'prices': 'list[TrainSearchPricing]'
    }

    attribute_map = {
        'departs_at': 'departs_at',
        'arrives_at': 'arrives_at',
        'departure_station': 'departure_station',
        'arrival_station': 'arrival_station',
        'marketing_company': 'marketing_company',
        'operating_company': 'operating_company',
        'train_number': 'train_number',
        'train_type': 'train_type',
        'prices': 'prices'
    }

    def __init__(self, departs_at=None, arrives_at=None, departure_station=None, arrival_station=None, marketing_company=None, operating_company=None, train_number=None, train_type=None, prices=None):
        """
        TrainSearchSegment - a model defined in Swagger
        """

        self._departs_at = None
        self._arrives_at = None
        self._departure_station = None
        self._arrival_station = None
        self._marketing_company = None
        self._operating_company = None
        self._train_number = None
        self._train_type = None
        self._prices = None

        self.departs_at = departs_at
        self.arrives_at = arrives_at
        self.departure_station = departure_station
        self.arrival_station = arrival_station
        self.marketing_company = marketing_company
        self.operating_company = operating_company
        self.train_number = train_number
        if train_type is not None:
          self.train_type = train_type
        self.prices = prices

    @property
    def departs_at(self):
        """
        Gets the departs_at of this TrainSearchSegment.
        The <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date-time of the train's departure in the local time zone of the departure station, in the format YYYY-MM-DDTHH:mm.

        :return: The departs_at of this TrainSearchSegment.
        :rtype: str
        """
        return self._departs_at

    @departs_at.setter
    def departs_at(self, departs_at):
        """
        Sets the departs_at of this TrainSearchSegment.
        The <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date-time of the train's departure in the local time zone of the departure station, in the format YYYY-MM-DDTHH:mm.

        :param departs_at: The departs_at of this TrainSearchSegment.
        :type: str
        """
        if departs_at is None:
            raise ValueError("Invalid value for `departs_at`, must not be `None`")

        self._departs_at = departs_at

    @property
    def arrives_at(self):
        """
        Gets the arrives_at of this TrainSearchSegment.
        The <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date-time of the train's arrival in the local time zone of the arrival station, in the format YYYY-MM-DDTHH:mm.

        :return: The arrives_at of this TrainSearchSegment.
        :rtype: str
        """
        return self._arrives_at

    @arrives_at.setter
    def arrives_at(self, arrives_at):
        """
        Sets the arrives_at of this TrainSearchSegment.
        The <a href=\"https://en.wikipedia.org/wiki/ISO_8601\">ISO 8601</a> date-time of the train's arrival in the local time zone of the arrival station, in the format YYYY-MM-DDTHH:mm.

        :param arrives_at: The arrives_at of this TrainSearchSegment.
        :type: str
        """
        if arrives_at is None:
            raise ValueError("Invalid value for `arrives_at`, must not be `None`")

        self._arrives_at = arrives_at

    @property
    def departure_station(self):
        """
        Gets the departure_station of this TrainSearchSegment.
        The station object representing the station at which the passenger should board this train in order to complete this part of the itinerary.

        :return: The departure_station of this TrainSearchSegment.
        :rtype: Station
        """
        return self._departure_station

    @departure_station.setter
    def departure_station(self, departure_station):
        """
        Sets the departure_station of this TrainSearchSegment.
        The station object representing the station at which the passenger should board this train in order to complete this part of the itinerary.

        :param departure_station: The departure_station of this TrainSearchSegment.
        :type: Station
        """
        if departure_station is None:
            raise ValueError("Invalid value for `departure_station`, must not be `None`")

        self._departure_station = departure_station

    @property
    def arrival_station(self):
        """
        Gets the arrival_station of this TrainSearchSegment.
        The station object representing the station at which the passenger should disembark this train in order to complete this part of the itinerary.

        :return: The arrival_station of this TrainSearchSegment.
        :rtype: Airport
        """
        return self._arrival_station

    @arrival_station.setter
    def arrival_station(self, arrival_station):
        """
        Sets the arrival_station of this TrainSearchSegment.
        The station object representing the station at which the passenger should disembark this train in order to complete this part of the itinerary.

        :param arrival_station: The arrival_station of this TrainSearchSegment.
        :type: Airport
        """
        if arrival_station is None:
            raise ValueError("Invalid value for `arrival_station`, must not be `None`")

        self._arrival_station = arrival_station

    @property
    def marketing_company(self):
        """
        Gets the marketing_company of this TrainSearchSegment.
        The name of the train company selling this train journey. This is the name you should see printed on your ticket.

        :return: The marketing_company of this TrainSearchSegment.
        :rtype: str
        """
        return self._marketing_company

    @marketing_company.setter
    def marketing_company(self, marketing_company):
        """
        Sets the marketing_company of this TrainSearchSegment.
        The name of the train company selling this train journey. This is the name you should see printed on your ticket.

        :param marketing_company: The marketing_company of this TrainSearchSegment.
        :type: str
        """
        if marketing_company is None:
            raise ValueError("Invalid value for `marketing_company`, must not be `None`")

        self._marketing_company = marketing_company

    @property
    def operating_company(self):
        """
        Gets the operating_company of this TrainSearchSegment.
        The name of the train company operating this train journey. This is the name you should see written on the train.

        :return: The operating_company of this TrainSearchSegment.
        :rtype: str
        """
        return self._operating_company

    @operating_company.setter
    def operating_company(self, operating_company):
        """
        Sets the operating_company of this TrainSearchSegment.
        The name of the train company operating this train journey. This is the name you should see written on the train.

        :param operating_company: The operating_company of this TrainSearchSegment.
        :type: str
        """
        if operating_company is None:
            raise ValueError("Invalid value for `operating_company`, must not be `None`")

        self._operating_company = operating_company

    @property
    def train_number(self):
        """
        Gets the train_number of this TrainSearchSegment.
        The identifying number of this train service. Usually the marketing company will only operate on train per day with this train number.

        :return: The train_number of this TrainSearchSegment.
        :rtype: str
        """
        return self._train_number

    @train_number.setter
    def train_number(self, train_number):
        """
        Sets the train_number of this TrainSearchSegment.
        The identifying number of this train service. Usually the marketing company will only operate on train per day with this train number.

        :param train_number: The train_number of this TrainSearchSegment.
        :type: str
        """
        if train_number is None:
            raise ValueError("Invalid value for `train_number`, must not be `None`")

        self._train_number = train_number

    @property
    def train_type(self):
        """
        Gets the train_type of this TrainSearchSegment.
        The type of train that you may expect for this journey. For example&colon; InterCity, Regional...

        :return: The train_type of this TrainSearchSegment.
        :rtype: str
        """
        return self._train_type

    @train_type.setter
    def train_type(self, train_type):
        """
        Sets the train_type of this TrainSearchSegment.
        The type of train that you may expect for this journey. For example&colon; InterCity, Regional...

        :param train_type: The train_type of this TrainSearchSegment.
        :type: str
        """

        self._train_type = train_type

    @property
    def prices(self):
        """
        Gets the prices of this TrainSearchSegment.
        Possible pricing for this train journey.

        :return: The prices of this TrainSearchSegment.
        :rtype: list[TrainSearchPricing]
        """
        return self._prices

    @prices.setter
    def prices(self, prices):
        """
        Sets the prices of this TrainSearchSegment.
        Possible pricing for this train journey.

        :param prices: The prices of this TrainSearchSegment.
        :type: list[TrainSearchPricing]
        """
        if prices is None:
            raise ValueError("Invalid value for `prices`, must not be `None`")

        self._prices = prices

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TrainSearchSegment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
